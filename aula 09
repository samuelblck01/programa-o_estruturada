/*
  01

  - Converta a função abaixo em uma arrow function e utilize-a para exibir um  
    valor no console.
*/

const converteToString = value => String(value)

console.log(convertToString(42)) // Saída: "42"

/*
  02

  - Crie uma função que retorne a quantidade de caracteres que uma string  
    recebida por parâmetro possui.
*/

const countCharacters = string => string.length

console.log(countCharacters('Hello, world!')) // Saída: 13

/*
  03

  - Crie uma função que retorne todos os caracteres de uma string em letras  
    minúsculas;  
  - Utilize a função para exibir a string abaixo no console.

  "CHOCOTONE E OVO DE PÁSCOA JUNTOS NO MERCADO EM PLENO FEVEREIRO"
*/

const toLowerCase = string => string.toLowerCase()

console.log(toLowerCase("CHOCOTONE E OVO DE PÁSCOA JUNTOS NO MERCADO EM PLENO FEVEREIRO"))

/*
  04

  - Crie uma função que recebe 2 parâmetros: um caractere e uma string;
  - Ao ser invocada, a função deve retornar o index do caractere na string.
*/

const findCharIndex = (char, string) => string.indexOf(char)

console.log(findCharIndex('o', 'Hello, world!')) // Saída: 4

/*
  05

  - Crie uma função que, ao ser invocada, retorna um boolean indicando se o item  
    passado por argumento existe no array (também passado por argumento).
*/

const itemExistsInArray = (item, array) => array.includes(item)

console.log(itemExistsInArray(3, [1, 2, 3, 4, 5])) // Saída: true

/*
  06

  - Crie uma função que retorna a concatenação de 2 arrays, passados como  
    argumentos em sua invocação;
*/

const concatArrays = (array1, array2) => array1.concat(array2)

console.log(concatArrays([1, 2], [3, 4])) // Saída: [1, 2, 3, 4]

/*
  07

  - Crie uma função que retorna o array passado como argumento em sua invocação,  
    mas com o último item removido.
*/

const removeLastItem = array => array.slice(0, -1)

console.log(removeLastItem([1, 2, 3, 4, 5])) // Saída: [1, 2, 3, 4]

/*
  08

  - Crie uma função que retorna se o valor passado como argumento em sua  
    invocação é null.
*/

const isNull = value => value === null

console.log(isNull(null)) // Saída: true

/*
  09

  - Crie uma função que apenas invoca uma função de callback recebida por  
    parâmetro;
  - Crie outra função que apenas exibe seu nome no console;
  - Invoque a função que recebe um callback por parâmetro, passando como  
    argumento a função que exibe seu nome no console e veja se o nome realmente  
    foi exibido.
*/

const invokeCallback = callback => callback()

const displayName = () => console.log('John Doe')

invokeCallback(displayName) // Saída: "John Doe"

/*
  10

  - Crie uma função que invoca uma função de callback recebida por parâmetro.  
    A invocação da função recebida por parâmetro deve receber um valor como  
    argumento;
  - Crie uma função que retorna o triplo de um número recebido por parâmetro;
  - Faça com que a invocação da função descrita no 1º item deste exercício (10)  
    resulte no triplo de 33.
*/

const invokeCallbackWithValue = (callback, value) => callback(value)

const triple = number => number * 3

console.log(invokeCallbackWithValue(triple, 33)) // Saída: 99

/*
  11

  - Utilizando um forEach, baseado no array "numbers", a cada iteração, exiba a  
    mensagem abaixo no console, substituindo os "X" pelas informações corretas;
  
  "O Xº item do array [X, X, X] é X."
*/

const numbers = [1, 2, 3]

numbers.forEach((number, index) => {
  console.log(`O ${index + 1}º item do array [${numbers.join(', ')}] é ${number}.`)
})

/*
  12

  - Converta o for loop abaixo em um forEach;
  - Após a conversão, verifique se a cópia do array lettersCopy realmente foi  
    criada.
*/

const letters = ['v', 'e', 'p']
let lettersCopy = []

letters.forEach(letter => lettersCopy.push(letter))

console.log(lettersCopy) // Saída: ["v", "e", "p"]
